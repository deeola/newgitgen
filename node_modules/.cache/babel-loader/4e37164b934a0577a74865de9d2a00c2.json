{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import axios from \"axios\";\nimport { useEffect, useState, useContext } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport AuthContext from \"../context/auth/authContext\";\nimport AlertContext from \"../context/alert/alertContext\";\n\nconst useSign = (callback, ValidateSign) => {\n  _s();\n\n  const history = useNavigate();\n  const authContext = useContext(AuthContext);\n  const alertContext = useContext(AlertContext);\n  const {\n    setAlert\n  } = alertContext;\n  const {\n    register,\n    myerror,\n    clearErrors,\n    isAuthenticated,\n    handleSubmitSub\n  } = authContext; //GENERAL\n\n  const [error, setError] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false); //SIGN UP\n\n  const [values, setValue] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\"\n  }); //handle change event\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValue({ ...values,\n      [name]: value\n    });\n  }; //Set to local storage\n  //On submit Event\n\n\n  const users = values;\n  useEffect(() => {\n    if (isAuthenticated) {\n      history(\"/\");\n    }\n\n    if (myerror === 'User already exists') {\n      setAlert(myerror, 'danger');\n      clearErrors();\n    } // eslint-disable-next-line\n\n  }, [myerror, isAuthenticated, history]);\n\n  const onSubmit = e => {\n    setError(ValidateSign(values)); // register(users)\n\n    handleSubmitSub(users.email, users);\n    e.preventDefault();\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    if (Object.keys(error).length === 0 && isSubmitting) {\n      callback();\n      history(\"/\");\n    } // eslint-disable-next-line\n\n  }, [error]);\n  return {\n    handleChange,\n    values,\n    onSubmit,\n    error,\n    users,\n    register\n  };\n};\n\n_s(useSign, \"sH6p1CfopsTyKbWtMwmTQ9ma5Qw=\", false, function () {\n  return [useNavigate];\n});\n\nexport default useSign;","map":{"version":3,"sources":["C:/Users/Adeola.bamigboye/Desktop/newgen/client/src/components/registration/useSign.js"],"names":["useEffect","useState","useContext","useNavigate","AuthContext","AlertContext","useSign","callback","ValidateSign","history","authContext","alertContext","setAlert","register","myerror","clearErrors","isAuthenticated","handleSubmitSub","error","setError","isSubmitting","setIsSubmitting","values","setValue","username","email","password","password2","handleChange","e","name","value","target","users","onSubmit","preventDefault","Object","keys","length"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAA+C,OAA/C;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;;AAIA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;AAAA;;AAC1C,QAAMC,OAAO,GAAGN,WAAW,EAA3B;AAEA,QAAMO,WAAW,GAAGR,UAAU,CAACE,WAAD,CAA9B;AACA,QAAMO,YAAY,GAAGT,UAAU,CAACG,YAAD,CAA/B;AAGF,QAAM;AAACO,IAAAA;AAAD,MAAaD,YAAnB;AACE,QAAM;AAACE,IAAAA,QAAD;AAAUC,IAAAA,OAAV;AAAkBC,IAAAA,WAAlB;AAA+BC,IAAAA,eAA/B;AAAgDC,IAAAA;AAAhD,MAAmEP,WAAzE,CAR0C,CAU1C;;AAEA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACmB,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,KAAD,CAAhD,CAb0C,CAe1C;;AACA,QAAM,CAACqB,MAAD,EAASC,QAAT,IAAqBtB,QAAQ,CAAC;AAClCuB,IAAAA,QAAQ,EAAE,EADwB;AAElCC,IAAAA,KAAK,EAAE,EAF2B;AAGlCC,IAAAA,QAAQ,EAAE,EAHwB;AAIlCC,IAAAA,SAAS,EAAE;AAJuB,GAAD,CAAnC,CAhB0C,CAuB1C;;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAE1B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AACAT,IAAAA,QAAQ,CAAC,EACP,GAAGD,MADI;AAEP,OAACQ,IAAD,GAAQC;AAFD,KAAD,CAAR;AAID,GAPD,CAzB0C,CAkC1C;AAGA;;;AAEA,QAAME,KAAK,GAAGX,MAAd;AAGAtB,EAAAA,SAAS,CAAC,MAAM;AAEd,QAAGgB,eAAH,EAAmB;AAClBP,MAAAA,OAAO,CAAC,GAAD,CAAP;AACA;;AACD,QAAGK,OAAO,KAAK,qBAAf,EAAsC;AACpCF,MAAAA,QAAQ,CAACE,OAAD,EAAU,QAAV,CAAR;AACAC,MAAAA,WAAW;AACZ,KARa,CAUd;;AACD,GAXQ,EAWP,CAACD,OAAD,EAAUE,eAAV,EAA2BP,OAA3B,CAXO,CAAT;;AAaA,QAAMyB,QAAQ,GAAKL,CAAD,IAAO;AACvBV,IAAAA,QAAQ,CAACX,YAAY,CAACc,MAAD,CAAb,CAAR,CADuB,CAEvB;;AACDL,IAAAA,eAAe,CAACgB,KAAK,CAACR,KAAP,EAAcQ,KAAd,CAAf;AAECJ,IAAAA,CAAC,CAACM,cAAF;AAEAd,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GARD;;AAUArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoC,MAAM,CAACC,IAAP,CAAYnB,KAAZ,EAAmBoB,MAAnB,KAA8B,CAA9B,IAAmClB,YAAvC,EAAqD;AACnDb,MAAAA,QAAQ;AACRE,MAAAA,OAAO,CAAC,GAAD,CAAP;AACD,KAJa,CAKd;;AACD,GANQ,EAMN,CAACS,KAAD,CANM,CAAT;AAQA,SAAO;AACLU,IAAAA,YADK;AAELN,IAAAA,MAFK;AAGLY,IAAAA,QAHK;AAILhB,IAAAA,KAJK;AAKLe,IAAAA,KALK;AAMLpB,IAAAA;AANK,GAAP;AAQD,CAjFD;;GAAMP,O;UACYH,W;;;AAkFlB,eAAeG,OAAf","sourcesContent":["// import axios from \"axios\";\r\nimport { useEffect, useState, useContext} from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport AuthContext from \"../context/auth/authContext\";\r\nimport AlertContext from \"../context/alert/alertContext\";\r\n\r\n\r\n\r\nconst useSign = (callback, ValidateSign) => {\r\n  const history = useNavigate();\r\n\r\n  const authContext = useContext(AuthContext)\r\n  const alertContext = useContext(AlertContext)\r\n\r\n\r\nconst {setAlert} = alertContext;\r\n  const {register,myerror,clearErrors, isAuthenticated, handleSubmitSub} = authContext\r\n\r\n  //GENERAL\r\n\r\n  const [error, setError] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  //SIGN UP\r\n  const [values, setValue] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    password2: \"\",\r\n  });\r\n\r\n  //handle change event\r\n\r\n  const handleChange = (e) => {\r\n\r\n    const { name, value } = e.target;\r\n    setValue({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  //Set to local storage\r\n\r\n\r\n  //On submit Event\r\n\r\n  const users = values;\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if(isAuthenticated){\r\n     history(\"/\");\r\n    }\r\n    if(myerror === 'User already exists') {\r\n      setAlert(myerror, 'danger')\r\n      clearErrors()\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  },[myerror, isAuthenticated, history])\r\n\r\n  const onSubmit =  (e) => {\r\n    setError(ValidateSign(values));\r\n    // register(users)\r\n   handleSubmitSub(users.email, users)\r\n     \r\n    e.preventDefault();\r\n    \r\n    setIsSubmitting(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(error).length === 0 && isSubmitting) {\r\n      callback();\r\n      history(\"/\");\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [error]);\r\n\r\n  return {\r\n    handleChange,\r\n    values,\r\n    onSubmit,\r\n    error,\r\n    users,\r\n    register\r\n  };\r\n};\r\n\r\nexport default useSign;\r\n"]},"metadata":{},"sourceType":"module"}